// src/components/Manage/TemplateViewModal.js
import React, { useState, useEffect } from 'react';

// Helper component for status badges, styled for the dark theme
const StatusBadge = ({ status }) => {
  let bgColorClass = 'bg-gray-700';
  let textColorClass = 'text-gray-200';
  switch (status) {
    case 'Published': bgColorClass = 'bg-green-900 bg-opacity-50'; textColorClass = 'text-green-300'; break;
    case 'Draft': bgColorClass = 'bg-yellow-900 bg-opacity-50'; textColorClass = 'text-yellow-300'; break;
    case 'Archived': bgColorClass = 'bg-gray-800 bg-opacity-50'; textColorClass = 'text-gray-400'; break;
    default: break;
  }
  return (
    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${bgColorClass} ${textColorClass}`}>
      {status}
    </span>
  );
};


const TemplateViewModal = ({ isOpen, onClose, template }) => {
  const [activeTab, setActiveTab] = useState('content');
  const [copySuccess, setCopySuccess] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setActiveTab('content');
      setCopySuccess(false);
    }
  }, [isOpen]);

  if (!isOpen || !template) return null;

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    // Handle YYYY-MM-DD format by ensuring it's parsed as UTC
    if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
        const date = new Date(dateString + 'T00:00:00Z');
        const options = { year: 'numeric', month: 'short', day: 'numeric', timeZone: 'UTC' };
        return date.toLocaleDateString(undefined, options);
    }
    // Handle full ISO strings
    const date = new Date(dateString);
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return date.toLocaleDateString(undefined, options);
  };

  const handleCopy = async () => {
    if (!template.textContent) return;
    try {
      await navigator.clipboard.writeText(template.textContent);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy text:', err);
    }
  };

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    const content = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${template.name} - Print Version</title>
          <style>
            /* Dark theme for screen view */
            body { 
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
              padding: 20px; 
              line-height: 1.6; 
              background-color: #1a202c; /* Equivalent to bg-gray-800 */
              color: #e2e8f0; /* Equivalent to text-gray-200 */
            }
            .header { 
              border-bottom: 2px solid #4a5568; /* border-gray-600 */
              padding-bottom: 10px; 
              margin-bottom: 20px; 
            }
            .metadata { 
              background-color: #2d3748; /* bg-gray-700 */
              padding: 15px; 
              margin-bottom: 20px; 
              border-radius: 8px; 
              border: 1px solid #4a5568;
            }
            .content { 
              white-space: pre-wrap; 
              font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace; 
              background-color: #121822; /* bg-gray-900 */
              padding: 15px; 
              border: 1px solid #4a5568; 
              border-radius: 8px; 
            }
            @media print {
              /* Light theme for printing */
              body {
                background-color: #ffffff;
                color: #000000;
              }
              .header {
                border-bottom-color: #333;
              }
              .metadata, .content {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
              }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${template.name}</h1>
            <p>Template Type: ${template.type}</p>
          </div>
          <div class="metadata">
            <p><strong>Version:</strong> ${template.version}</p>
            <p><strong>Status:</strong> ${template.status}</p>
            <p><strong>Last Updated:</strong> ${formatDate(template.lastUpdated)}</p>
            ${template.generatedBy ? `<p><strong>Generated By:</strong> ${template.generatedBy}</p>` : ''}
          </div>
          <h3 style="margin-top: 2rem; margin-bottom: 1rem;">Content</h3>
          <div class="content">
            ${template.textContent || 'No content available'}
          </div>
          <script>
            window.onload = function() { window.print(); window.close(); }
          </script>
        </body>
      </html>
    `;
    printWindow.document.write(content);
    printWindow.document.close();
  };

  const renderTemplateContent = () => {
    if (!template.textContent) {
      return (
        <div className="text-center py-8 text-theme-text-secondary">
          <p>No text content available for this template.</p>
          {template.contentLink && (
            <a 
              href={template.contentLink} 
              target="_blank" 
              rel="noopener noreferrer"
              className="mt-2 inline-block text-blue-400 hover:text-theme-accent"
            >
              Download Original File
            </a>
          )}
        </div>
      );
    }

    const isChecklist = template.type.toLowerCase().includes('checklist') || 
                       template.textContent.includes('□') || 
                       template.textContent.includes('[ ]');

    if (isChecklist) {
      const lines = template.textContent.split('\n');
      return (
        <div className="space-y-2 text-theme-text-primary">
          {lines.map((line, index) => {
            const isCheckItem = line.trim().startsWith('□') || 
                               line.trim().startsWith('[ ]') || 
                               line.trim().startsWith('-');
            return (
              <div 
                key={index} 
                className={`${isCheckItem ? 'ml-4 flex items-start' : ''} ${line.trim() === '' ? 'h-4' : ''}`}
              >
                {isCheckItem && (
                  <span className="text-theme-text-secondary mr-2 mt-0.5">□</span>
                )}
                <span className={`${!isCheckItem && line.trim() !== '' ? 'font-semibold' : ''}`}>
                  {line.replace(/^[\s□\[\]\-]+/, '')}
                </span>
              </div>
            );
          })}
        </div>
      );
    }

    // Regular document display
    return (
      <div className="whitespace-pre-wrap font-mono text-sm bg-theme-bg p-4 rounded-md border border-theme-border text-theme-text-primary">
        {template.textContent}
      </div>
    );
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 overflow-y-auto h-full w-full z-50 flex justify-center items-center p-4">
      <div className="bg-theme-bg-secondary rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col border border-theme-border">
        {/* Header */}
        <div className="px-6 py-4 border-b border-theme-border flex justify-between items-center">
          <div>
            <h2 className="text-xl font-semibold text-theme-text-primary">{template.name}</h2>
            <p className="text-sm text-theme-text-secondary mt-1">{template.type}</p>
          </div>
          <button
            onClick={onClose}
            className="text-theme-text-secondary hover:text-white transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Tab Navigation */}
        <div className="px-6 border-b border-theme-border">
          <nav className="-mb-px flex space-x-6">
            <button
              onClick={() => setActiveTab('content')}
              className={`py-3 px-1 border-b-2 font-medium text-sm focus:outline-none ${
                activeTab === 'content'
                  ? 'border-theme-accent text-theme-accent'
                  : 'border-transparent text-theme-text-secondary hover:text-theme-text-primary hover:border-gray-500'
              }`}
            >
              Content
            </button>
            <button
              onClick={() => setActiveTab('details')}
              className={`py-3 px-1 border-b-2 font-medium text-sm focus:outline-none ${
                activeTab === 'details'
                  ? 'border-theme-accent text-theme-accent'
                  : 'border-transparent text-theme-text-secondary hover:text-theme-text-primary hover:border-gray-500'
              }`}
            >
              Details
            </button>
          </nav>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {activeTab === 'content' ? (
            <div>{renderTemplateContent()}</div>
          ) : (
            <div className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4">
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">Version</h4>
                  <p className="mt-1 text-sm text-theme-text-primary">{template.version}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">Status</h4>
                  <div className="mt-1"><StatusBadge status={template.status} /></div>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">Last Updated</h4>
                  <p className="mt-1 text-sm text-theme-text-primary">{formatDate(template.lastUpdated)}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">Template ID</h4>
                  <p className="mt-1 text-sm text-theme-text-primary font-mono">{template.id}</p>
                </div>
              </div>
              
              {template.generatedBy && (
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">Generated By</h4>
                  <p className="mt-1 text-sm text-theme-text-primary">{template.generatedBy}</p>
                </div>
              )}
              
              {template.promptUsed && template.generatedBy?.includes('AI') && (
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">AI Prompt Used</h4>
                  <div className="mt-1 p-3 bg-theme-bg rounded-md border border-theme-border">
                    <p className="text-sm text-theme-text-primary whitespace-pre-wrap">{template.promptUsed}</p>
                  </div>
                </div>
              )}

              {template.contentLink && (
                <div>
                  <h4 className="text-sm font-medium text-theme-text-secondary">Original File</h4>
                  <a 
                    href={template.contentLink} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="mt-1 inline-flex items-center text-sm text-blue-400 hover:text-theme-accent"
                  >
                    <svg className="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Download
                  </a>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Footer Actions */}
        <div className="px-6 py-4 border-t border-theme-border flex justify-between items-center bg-black bg-opacity-20">
          <div className="flex space-x-3">
            <button
              onClick={handleCopy}
              className="px-4 py-2 text-sm font-medium text-theme-text-primary bg-gray-700 border border-transparent rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-theme-bg-secondary focus:ring-gray-500 flex items-center"
              disabled={!template.textContent}
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              {copySuccess ? 'Copied!' : 'Copy Content'}
            </button>
            <button
              onClick={handlePrint}
              className="px-4 py-2 text-sm font-medium text-theme-text-primary bg-gray-700 border border-transparent rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-theme-bg-secondary focus:ring-gray-500 flex items-center"
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
              </svg>
              Print
            </button>
          </div>
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-theme-bg-secondary focus:ring-blue-500"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default TemplateViewModal;